#!/bin/zsh
#
# mac-speed.zsh — macOS performance & latency tuner (zsh edition, with CLI)
# - Removes/reduces animations, improves input responsiveness
# - Cuts compositor/GPU overhead for smoother UI
# - Optional aggressive cache/log cleanup
# - Backs up changed preference domains for easy restore
#
# CLI:
#   -d  Dry run (print actions only, do not change system)
#   -a  Aggressive mode (deeper cleanups; first launches may be slower)
#   -s  Skip softwareupdate (no OS/app update checks)
#   -h  Help (show this message)
#
# Restore tip:
#   Use `defaults import <domain> <backup-file.plist>` from ~/DefaultsBackup/<timestamp>/
#

# ---------- strict mode ----------
set -e
set -u
set -o pipefail

# ---------- default flags (overridden by CLI) ----------
DRY_RUN=0
AGGRESSIVE=0
SKIP_UPDATES=0

# ---------- help / usage ----------
usage() {
  echo "Usage: mac-speed.zsh [options]"
  echo
  echo "Options:"
  echo "  -d    Dry run: show what would be done, without making changes"
  echo "  -a    Aggressive mode: deeper cache/log cleanups (caches will rebuild)"
  echo "  -s    Skip software updates to save time"
  echo "  -h    Show this help"
  echo
  echo "Examples:"
  echo "  ./mac-speed.zsh          # run with defaults (safe)"
  echo "  ./mac-speed.zsh -a       # add aggressive cleanups"
  echo "  ./mac-speed.zsh -d -s    # dry run and skip updates"
}

# ---------- parse CLI options ----------
while getopts "dash" opt; do
  case "$opt" in
    d) DRY_RUN=1 ;;
    a) AGGRESSIVE=1 ;;
    s) SKIP_UPDATES=1 ;;
    h) usage; exit 0 ;;
    *) usage; exit 1 ;;
  esac
done
shift $((OPTIND-1))

# ---------- constants ----------
readonly START_TS="$(date +%Y%m%d-%H%M%S)"                     # Timestamp for backup folder
readonly BACKUP_DIR="${HOME}/DefaultsBackup/${START_TS}"       # Backup directory path
readonly GREEN=$'\033[32m'; readonly YELLOW=$'\033[33m'; readonly DIM=$'\033[2m'; readonly RESET=$'\033[0m'
readonly SUDO="${SUDO:-sudo}"                                  # Allow override for MDM/sandbox

# ---------- helper functions ----------
log()  { printf "%s•%s %s\n" "$GREEN" "$RESET" "$*"; }         # Pretty log output
warn() { printf "%s!%s %s\n"  "$YELLOW" "$RESET" "$*"; }       # Pretty warning output
run()  {
  if [[ "$DRY_RUN" == "1" ]]; then
    printf "%sDRY:%s %s\n" "$DIM" "$RESET" "$*"
  else
    eval "$@"
  fi
}

require_macos() {
  if ! command -v sw_vers >/dev/null; then
    echo "This script targets macOS."
    exit 1
  fi
  local ver; ver="$(sw_vers -productVersion)"
  log "Detected macOS ${ver}"
}

need_tools() {
  for cmd in defaults killall mdutil diskutil softwareupdate; do
    if ! command -v "$cmd" >/dev/null; then
      echo "Missing required tool: $cmd"
      exit 1
    fi
  done
}

backup_domain() {
  local domain="$1"
  mkdir -p -- "$BACKUP_DIR"
  if /usr/bin/defaults domains | grep -q -E "(^| )${domain}( |$)"; then
    # Some domains may not export cleanly; ignore failures.
    run "/usr/bin/defaults export '${domain}' - > '${BACKUP_DIR}/${domain}.plist' 2>/dev/null || true"
  fi
}

write_default() {
  local domain="$1" key="$2" type="$3" value="$4"
  backup_domain "$domain"
  log "defaults write ${domain} ${key} (-${type}) => ${value}"
  run "/usr/bin/defaults write '${domain}' '${key}' -${type} ${value}"
}

write_default_global() { write_default "NSGlobalDomain" "$@"; }

host_default() {
  local domain="$1" key="$2" type="$3" value="$4"
  backup_domain "$domain"
  log "defaults -currentHost write ${domain} ${key} (-${type}) => ${value}"
  run "/usr/bin/defaults -currentHost write '${domain}' '${key}' -${type} ${value}"
}

restart_if_running() {
  for app in "$@"; do
    run "killall '${app}' 2>/dev/null || true"
  done
}

# ---------- start ----------
require_macos
need_tools

# ---------- UI responsiveness ----------
log "Applying low-latency UI settings…"

write_default_global ApplePressAndHoldEnabled bool false     # Disable press-and-hold → faster key repeat
write_default_global KeyRepeat int 1                         # Fastest key repeat
write_default_global InitialKeyRepeat int 15                 # Shorter delay before repeat starts

write_default_global NSAutomaticWindowAnimationsEnabled bool false  # Disable window open/close animations
write_default_global NSWindowResizeTime float 0.001                 # Near-instant window resizing
write_default_global NSScrollAnimationEnabled bool false            # Disable smooth scroll animation
write_default_global NSToolbarTitleViewRolloverDelay float 0        # No toolbar hover delay
write_default_global WebKitScrollAnimationsEnabled bool false       # Disable scroll animations in WebKit apps

write_default -g NSScrollViewRubberbanding bool false                # Disable rubberband "bounce" scrolling
write_default -g QLPanelAnimationDuration float 0                    # Instant Quick Look opening

run "${SUDO} /usr/bin/defaults write com.apple.universalaccess reduceTransparency -bool true"  # Less GPU work
run "${SUDO} /usr/bin/defaults write com.apple.universalaccess reduceMotion -bool true"        # Less motion effects
run "${SUDO} /usr/bin/defaults write com.apple.universalaccess showWindowTitlebarIcons -bool true"  # Icons in titlebars

# ---------- Dock & Mission Control ----------
log "Tuning Dock & Mission Control…"

write_default com.apple.dock autohide bool true
write_default com.apple.dock autohide-delay float 0
write_default com.apple.dock autohide-time-modifier float 0
write_default com.apple.dock launchanim bool false
write_default com.apple.dock mineffect string scale
write_default com.apple.dock expose-animation-duration float 0
write_default com.apple.dock show-recents bool false
write_default com.apple.dock mru-spaces bool true
write_default com.apple.dock tilesize int 44
write_default com.apple.dock orientation string bottom
write_default com.apple.dock static-only bool true

# ---------- Finder ----------
log "Optimizing Finder…"

write_default com.apple.finder FXPreferredViewStyle string Nlsv
write_default com.apple.finder ShowPathbar bool true
write_default com.apple.finder ShowStatusBar bool true
write_default com.apple.finder _FXSortFoldersFirst bool true
write_default com.apple.finder _FXSortFoldersFirstOnDesktop bool true
write_default com.apple.finder FXRemoveOldTrashItems bool true
write_default com.apple.finder FXEnableExtensionChangeWarning bool false
write_default com.apple.finder QuitMenuItem bool true
write_default com.apple.finder AppleShowAllFiles bool true
write_default com.apple.finder CreateDesktop bool true
write_default com.apple.finder FXDefaultSearchScope string SCcf

# ---------- Screenshots ----------
log "Configuring screenshots…"

write_default com.apple.screencapture disable-shadow bool true
write_default com.apple.screencapture include-date bool true
write_default com.apple.screencapture show-thumbnail bool false
write_default com.apple.screencapture type string png
write_default com.apple.screencapture location string "${HOME}/Desktop"

# ---------- Apps & Services ----------
log "Tuning common apps & services…"

write_default com.apple.ActivityMonitor IconType int 5
write_default com.apple.ActivityMonitor UpdatePeriod int 2
write_default com.apple.TextEdit RichText bool false
write_default com.apple.Music userWantsPlaybackNotifications bool false
host_default com.apple.ImageCapture disableHotPlug bool true

# ---------- Spotlight ----------
log "Adjusting Spotlight indexing…"

for vol in /Volumes/*; do
  if [[ ! -e "$vol" ]]; then
    continue
  fi
  if [[ -L "$vol" ]]; then
    continue
  fi
  if diskutil info "$vol" 2>/dev/null | grep -q "External:.*Yes"; then
    warn "Disabling Spotlight on external volume: $vol"
    run "${SUDO} /usr/bin/mdutil -i off '$vol' 2>/dev/null || true"
  fi
done
run "${SUDO} /usr/bin/mdutil -i on / 2>/dev/null || true"

# ---------- Login/window restore ----------
log "Disabling app relaunch after login/logout…"

write_default com.apple.loginwindow TALLogoutSavesState bool false
write_default com.apple.loginwindow LoginwindowLaunchesRelaunchApps bool false

# ---------- Maintenance (safe) ----------
log "Running safe maintenance…"

# Only run updates if SKIP_UPDATES != 1
if [[ "$SKIP_UPDATES" != "1" ]]; then
  warn "Checking for software updates (may take a while)…"
  run "softwareupdate -ia --verbose || true"
fi

LSREGISTER="/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister"
if [[ -x "$LSREGISTER" ]]; then
  log "Rebuilding Launch Services database…"
  run "'$LSREGISTER' -kill -r -domain local -domain system -domain user"
fi

log "Rotating logs (periodic daily/weekly/monthly)…"
run "${SUDO} periodic daily weekly monthly || true"

# ---------- Aggressive mode (optional) ----------
if [[ "$AGGRESSIVE" == "1" ]]; then
  warn "AGGRESSIVE=1 — heavier cleanups enabled. Backups in ${BACKUP_DIR}"
  run "${SUDO} rm -rf /Library/Caches/* 2>/dev/null || true"
  run "rm -rf '${HOME}/Library/Caches/'* 2>/dev/null || true"
  run "${SUDO} rm -rf /Library/Logs/* 2>/dev/null || true"
  run "rm -rf '${HOME}/Library/Logs/'* 2>/dev/null || true"
  run "${SUDO} rm -rf /private/var/log/* 2>/dev/null || true"
  run "rm -rf '${HOME}/Library/Caches/com.apple.QuickLook.thumbnailcache' 2>/dev/null || true"
  run "qlmanage -r cache 2>/dev/null || true"
  run "rm -rf '${HOME}/Library/Preferences/com.apple.dock.db' 2>/dev/null || true"
fi

# ---------- Apply & restart ----------
log "Restarting agents to apply changes…"

run "killall cfprefsd 2>/dev/null || true"
restart_if_running Dock Finder SystemUIServer Activity\\ Monitor TextEdit Music

echo
log "Done. Backups saved under: ${BACKUP_DIR}"
echo "Tip: Reboot to fully apply Spotlight/LaunchServices changes."