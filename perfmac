#!/bin/zsh
###############################################################################
# perfmac — macOS Performance & Latency Tuner
#
# Description:
#   Optimizes macOS for maximum responsiveness by disabling or reducing
#   animations, tuning input delays, lowering compositor overhead, and applying
#   various Finder/Dock/system tweaks.
#
# Features:
#   - Low-latency UI + fast keyboard repeat rates
#   - Finder & Dock optimizations (Dock always visible)
#   - Aggressive cleanup of caches/logs (prunes items older than 7 days)
#   - Installs available software updates
#   - Spotlight control (disable on external drives)
#   - Safe to run multiple times
#   - Supports dry-run mode
#
# Usage:
#   ./perfmac [options]
#
# Options:
#   -d    Dry run: print commands without executing
#   -h    Show usage/help
#
# Examples:
#   ./perfmac            # aggressive optimizations (default)
#   ./perfmac -d         # dry-run mode
#
# Author:
#   Pierpaolo Pattitoni — https://github.com/piercoder
#
# License:
#   MIT License — See https://opensource.org/licenses/MIT
#
# Warning:
#   This script writes to system preferences and requires sudo for some tasks.
#   Review the code before running. Use at your own risk.
###############################################################################

set -e
set -u
set -o pipefail

DRY_RUN=0

usage() {
  echo "Usage: perfmac [options]"
  echo
  echo "Options:"
  echo "  -d    Dry run: show what would be done, without making changes"
  echo "  -h    Show this help"
  echo
  echo "Examples:"
  echo "  ./perfmac          # run aggressive optimizations (default)"
  echo "  ./perfmac -d       # dry run (no changes)"
}

while getopts "dh" opt; do
  case "$opt" in
    d) DRY_RUN=1 ;;
    h) usage; exit 0 ;;
    *) usage; exit 1 ;;
  esac
done
shift $((OPTIND-1))

# --- utils ---
readonly GREEN=$'\033[32m'; readonly YELLOW=$'\033[33m'; readonly DIM=$'\033[2m'; readonly RESET=$'\033[0m'
readonly RED=$'\033[31m'; readonly BOLD=$'\033[1m'
readonly SUDO="${SUDO:-sudo}"

log()  { printf "%s•%s %s\n" "$GREEN" "$RESET" "$*"; }
warn() { printf "%s!%s %s\n"  "$YELLOW" "$RESET" "$*"; }
run()  {
  if [[ "$DRY_RUN" == "1" ]]; then
    printf "%sDRY:%s %s\n" "$DIM" "$RESET" "$*"
  else
    if ! eval "$@"; then
      warn "Command failed (ignored): $*"
    fi
  fi
}

dump_default_current() {
  # Skip backing up during dry runs to avoid side effects
  [[ "${DRY_RUN}" == "1" ]] && return 0
  local domain="$1" key="$2"
  { printf "%s %s =>\n" "$domain" "$key";
    /usr/bin/defaults read "$domain" "$key" 2>/dev/null || true; } >> "${BACKUP}"
}

require_macos() {
  if ! command -v sw_vers >/dev/null; then echo "This script targets macOS."; exit 1; fi
  local ver; ver="$(sw_vers -productVersion)"
  log "Detected macOS ${ver}"
}

need_tools() {
  for cmd in defaults killall mdutil diskutil softwareupdate qlmanage launchctl; do
    if ! command -v "$cmd" >/dev/null; then echo "Missing required tool: $cmd"; exit 1; fi
  done
}

write_default() {
  local domain="$1" key="$2" type="$3" value="$4"
  log "defaults write ${domain} ${key} (-${type}) => ${value}"
  run "/usr/bin/defaults write '${domain}' '${key}' -${type} \"${value}\""
}
write_default_global() { write_default "NSGlobalDomain" "$@"; }

host_default() {
  local domain="$1" key="$2" type="$3" value="$4"
  log "defaults -currentHost write ${domain} ${key} (-${type}) => ${value}"
  run "/usr/bin/defaults -currentHost write '${domain}' '${key}' -${type} \"${value}\""
}

restart_if_running() { for app in "$@"; do run "killall '${app}' 2>/dev/null || true"; done }

# Robust zsh implementation (works with set -u)
apply_specs() {
  # $1 is a newline-separated spec string: "domain|key|type|value"
  local -a specs; specs=("${(f)1}")
  local line domain key type value rest
  for line in "${specs[@]}"; do
    # Trim potential CR from CRLF files
    line="${line%$'\r'}"
    [[ -z "$line" ]] && continue
    # capture fields while preserving spaces in value
    domain="${line%%|*}"                     # before first |
    rest="${line#*|}"                        # after first |
    key="${rest%%|*}"                         # second field
    rest="${rest#*|}"                        # after second |
    type="${rest%%|*}"                        # third field
    value="${rest#*|}"                       # remainder is value (may contain spaces)
    if [[ "$domain" == "HOST" ]]; then
      # when domain is HOST, the actual domain is in key, shift fields
      domain="$key"; key="$type"; type="${value%%|*}"; value="${value#*|}"
      dump_default_current "$domain" "$key"
      host_default "$domain" "$key" "$type" "$value"
    elif [[ "$domain" == "NSGlobalDomain" ]]; then
      dump_default_current "$domain" "$key"
      write_default_global "$key" "$type" "$value"
    else
      dump_default_current "$domain" "$key"
      write_default "$domain" "$key" "$type" "$value"
    fi
  done
}

# --- preflight ---
require_macos
need_tools

BACKUP="${HOME}/perfmac-backup-$(date +%Y%m%d-%H%M%S).txt"
run "echo '# perfmac preferences backup' > \"${BACKUP}\""
run "echo \"# Created: $(date)\" >> \"${BACKUP}\""
run "echo '# To restore: run defaults write <domain> <key> -<type> <value> from the blocks below' >> \"${BACKUP}\""
run "echo '# Types: -bool true|false, -int N, -float N, -string \"text\"' >> \"${BACKUP}\""
run "echo >> \"${BACKUP}\""

# Summary banner
echo "======================================="
echo " perfmac run summary"
echo " - Software updates: YES"
echo " - Dry run:        $([[ ${DRY_RUN:-0} -eq 1 ]] && echo YES || echo NO)"
echo "======================================="
[[ ${DRY_RUN:-0} -eq 1 ]] && warn "Dry run: No settings will be changed. Some reads may still occur; backup writing is skipped."

# --- specs ---
# Note: Some UI-related defaults may be ignored on recent macOS; keeping them is harmless:
#   NSAutomaticWindowAnimationsEnabled, NSWindowResizeTime, NSScrollViewRubberbanding, QLPanelAnimationDuration
UI_SPECS=$'
NSGlobalDomain|ApplePressAndHoldEnabled|bool|false
NSGlobalDomain|KeyRepeat|int|1
NSGlobalDomain|InitialKeyRepeat|int|15
NSGlobalDomain|NSScrollAnimationEnabled|bool|false
NSGlobalDomain|NSToolbarTitleViewRolloverDelay|float|0
NSGlobalDomain|WebKitScrollAnimationsEnabled|bool|false
'

ACCESSIBILITY_SPECS=$'
com.apple.universalaccess|reduceTransparency|bool|true
com.apple.universalaccess|reduceMotion|bool|true
com.apple.universalaccess|showWindowTitlebarIcons|bool|true
'

DOCK_SPECS=$'
com.apple.dock|autohide|bool|false
com.apple.dock|launchanim|bool|false
com.apple.dock|mineffect|string|scale
com.apple.dock|show-recents|bool|false
com.apple.dock|mru-spaces|bool|false
com.apple.dock|tilesize|int|44
com.apple.dock|orientation|string|bottom
com.apple.dock|static-only|bool|false
'

FINDER_SPECS=$'
com.apple.finder|FXPreferredViewStyle|string|Nlsv
com.apple.finder|ShowPathbar|bool|true
com.apple.finder|ShowStatusBar|bool|true
com.apple.finder|_FXSortFoldersFirst|bool|true
com.apple.finder|_FXSortFoldersFirstOnDesktop|bool|true
com.apple.finder|FXRemoveOldTrashItems|bool|true
com.apple.finder|FXEnableExtensionChangeWarning|bool|false
com.apple.finder|QuitMenuItem|bool|true
com.apple.finder|AppleShowAllFiles|bool|true
com.apple.finder|CreateDesktop|bool|true
com.apple.finder|FXDefaultSearchScope|string|SCcf
'

SCREENSHOT_SPECS=$(cat <<EOF
com.apple.screencapture|disable-shadow|bool|true
com.apple.screencapture|include-date|bool|true
com.apple.screencapture|show-thumbnail|bool|false
com.apple.screencapture|type|string|png
com.apple.screencapture|location|string|${HOME}/Desktop
EOF
)

APPS_SPECS=$'
com.apple.ActivityMonitor|IconType|int|5
com.apple.ActivityMonitor|UpdatePeriod|int|2
com.apple.TextEdit|RichText|bool|false
com.apple.Music|userWantsPlaybackNotifications|bool|false
HOST|com.apple.ImageCapture|disableHotPlug|bool|true
'

# --- apply settings ---
log "Applying low-latency UI settings…"
apply_specs "$UI_SPECS"

log "Reducing compositor overhead (Accessibility)…"
apply_specs "$ACCESSIBILITY_SPECS"

log "Tuning Dock (visible)…"
apply_specs "$DOCK_SPECS"

log "Optimizing Finder…"
apply_specs "$FINDER_SPECS"

log "Configuring Screenshots…"
apply_specs "$SCREENSHOT_SPECS"

log "Tuning common apps & services…"
apply_specs "$APPS_SPECS"

# --- Spotlight tweaks ---
log "Adjusting Spotlight (keep on system drive; disable on externals)…"
for vol in /Volumes/*; do
  if [[ ! -e "$vol" ]]; then continue; fi
  if [[ -L "$vol" ]]; then continue; fi
  # Skip system/readonly volumes
  if [[ "$vol" == /System/Volumes/* ]]; then continue; fi
  if [[ ! -w "$vol" ]]; then continue; fi
  if diskutil info "$vol" 2>/dev/null | grep -q "External:.*Yes"; then
    warn "Disabling Spotlight on external volume: $vol"
    run "${SUDO} /usr/bin/mdutil -i off '$vol' 2>/dev/null || true"
    run "${SUDO} touch '$vol'/.metadata_never_index || true"
    run "${SUDO} chflags hidden '$vol'/.metadata_never_index || true"
    warn "To re-enable Spotlight on $vol: remove $vol/.metadata_never_index and run 'sudo mdutil -i on \"$vol\"'"
  fi
done
run "${SUDO} /usr/bin/mdutil -i on / >/dev/null 2>&1 || true"

# --- Login/window restore behavior ---
log "Disabling app relaunch after login/logout…"
write_default com.apple.loginwindow TALLogoutSavesState bool false
write_default com.apple.loginwindow LoginwindowLaunchesRelaunchApps bool false

# --- Maintenance (safe) ---
log "Running safe maintenance…"
warn "Installing available software updates (this may take a while)…"
run "${SUDO} softwareupdate -ia --verbose || true"

LSREGISTER="/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister"
if [[ -x "$LSREGISTER" ]]; then
  log "Rebuilding Launch Services database…"
  run "'$LSREGISTER' -kill -r -domain local -domain system -domain user"
else
  warn "Launch Services tool not found at $LSREGISTER (skipping rebuild)"
fi

warn "Skipping legacy periodic(8) maintenance on modern macOS."

warn "Performing deep cache/log cleanup…"
# prune older than 7 days in system caches/logs
run "${SUDO} find /Library/Caches -mindepth 1 -mtime +7 -print -delete 2>/dev/null || true"
run "${SUDO} find /Library/Logs -mindepth 1 -type f -mtime +7 -print -delete 2>/dev/null || true"
run "${SUDO} find /private/var/log -mindepth 1 -type f -mtime +7 -print -delete 2>/dev/null || true"
# user caches/logs
run "find '${HOME}/Library/Caches' -mindepth 1 -mtime +7 -print -delete 2>/dev/null || true"
run "find '${HOME}/Library/Logs' -mindepth 1 -type f -mtime +7 -print -delete 2>/dev/null || true"
# quicklook + dock db resets
run "rm -rf '${HOME}/Library/Caches/com.apple.QuickLook.thumbnailcache' 2>/dev/null || true"
run "qlmanage -r cache >/dev/null 2>&1 || true"
run "rm -f '${HOME}/Library/Application Support/Dock/'*.db 2>/dev/null || true"

# --- Apply & restart affected agents ---
log "Restarting agents to apply changes…"
run "killall cfprefsd 2>/dev/null || true"
restart_if_running "Dock" "Finder" "SystemUIServer" "Activity Monitor" "TextEdit" "Music"
if launchctl list 2>/dev/null | grep -q "com\.apple\.Dock"; then
  run "launchctl kickstart -k gui/$UID/com.apple.Dock 2>/dev/null || true"
else
  warn "launchctl label com.apple.Dock not present; skipping kickstart"
fi

echo
log "Done. Tip: Reboot to fully apply Spotlight/LaunchServices changes."
log "Preferences backup saved to: ${BACKUP}"
log "All steps completed."