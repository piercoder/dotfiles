#!/bin/sh
# POSIX-only macOS system info script

# Basic safety (no pipefail in pure POSIX)
set -eu

#========================#
#   Arguments (optional)
#========================#
COLOR=1
PLAIN=0
for arg in "$@"; do
  case "$arg" in
    --no-color) COLOR=0 ;;
    --plain)    PLAIN=1 ;;
  esac
done

#========================#
#      Colors (POSIX)
#========================#
# Enable colors only if stdout is a TTY, NO_COLOR is unset, and COLOR is enabled
if [ -t 1 ] && [ "${NO_COLOR:-}" = "" ] && [ "$COLOR" -eq 1 ]; then
  ESC=$(printf '\033')
  ACCENT1="${ESC}[38;2;232;51;28m"      # red
  ACCENT2="${ESC}[38;2;104;193;86m"     # green
  ACCENT3="${ESC}[38;2;241;211;43m"     # yellow
  ACCENT4="${ESC}[38;2;28;152;232m"     # blue
  NC="${ESC}[0m"
  BOLD="${ESC}[1m"
else
  ACCENT1=""; ACCENT2=""; ACCENT3=""; ACCENT4=""
  NC=""; BOLD=""
fi

#========================#
#   macOS check
#========================#
OS_UNAME=$(uname -s 2>/dev/null || echo unknown)
if [ "$OS_UNAME" != "Darwin" ]; then
  printf '%s\n' "This script is intended for macOS (Darwin). Exiting." >&2
  exit 1
fi

#========================#
#    System Information
#========================#
USER_INFO="$(whoami)@$(hostname -s 2>/dev/null || hostname)"
OS="$(sw_vers -productName) $(sw_vers -productVersion)"
KERNEL="$(uname -sr)"

if uptime -p >/dev/null 2>&1; then
  UPTIME=$(uptime -p | sed 's/^up //')
else
  UPTIME=$(uptime | sed 's/^.*up *//; s/,.*//' | tr -s ' ')
fi

#========================#
#     Hardware Info
#========================#
CPU_MODEL=$( (sysctl -n machdep.cpu.brand_string 2>/dev/null || true) | tr -d '\n')
if [ -z "$CPU_MODEL" ]; then
  CPU_MODEL=$(sysctl -n hw.model 2>/dev/null || echo "?")
fi
CPU_CORES=$(sysctl -n hw.ncpu 2>/dev/null || echo "?")
CPU="$CPU_MODEL (${CPU_CORES} cores)"

# Memory calculation (active + wired + speculative + compressed)
PAGE_SIZE=$(vm_stat | awk '/page size of/ {print $8}')
ACTIVE=0 WIRED=0 SPEC=0 COMPRESS=0
VM_OUT=$(vm_stat)
ACTIVE=$(printf '%s\n' "$VM_OUT" | awk '/Pages active/ {gsub(/\./,""); print $3+0}')
WIRED=$(printf  '%s\n' "$VM_OUT" | awk '/Pages wired down/ {gsub(/\./,""); print $4+0}')
SPEC=$(printf   '%s\n' "$VM_OUT" | awk '/Pages speculative/ {gsub(/\./,""); print $3+0}')
COMPRESS=$(printf '%s\n' "$VM_OUT" | awk '/Pages occupied by/ {gsub(/\./,""); print $5+0}')

TOTAL_BYTES=$(sysctl -n hw.memsize)
USED_BYTES=$(( (ACTIVE + WIRED + SPEC + COMPRESS) * PAGE_SIZE ))

# Inline helper: bytes → GiB (1 decimal)
BYTES_TO_GIB() {
  awk 'BEGIN{printf("%.1f", '"$1"'/1024/1024/1024)}'
}
MEM_USED_GIB=$(BYTES_TO_GIB "$USED_BYTES")
MEM_TOTAL_GIB=$(BYTES_TO_GIB "$TOTAL_BYTES")
MEM_PCT=$(awk 'BEGIN{printf("%.0f", ('"$USED_BYTES"'*100)/'"$TOTAL_BYTES"')}')
MEMORY="${MEM_USED_GIB} / ${MEM_TOTAL_GIB} GiB (${MEM_PCT}%%)"

#========================#
#      Disk usage
#========================#
TARGET="/"
if [ -d /System/Volumes/Data ]; then
  TARGET="/System/Volumes/Data"
fi
DISK_LINE=$(df -kP "$TARGET" | awk 'NR==2')
DISK_USED_KB=$(printf '%s\n' "$DISK_LINE" | awk '{print $3}')
DISK_TOTAL_KB=$(printf '%s\n' "$DISK_LINE" | awk '{print $2}')
DISK_PERC=$(printf '%s\n' "$DISK_LINE" | awk '{print $5}')
DISK_VALUE=$(awk 'BEGIN{
  u='"$DISK_USED_KB"'; t='"$DISK_TOTAL_KB"';
  printf("%.1f / %.1f GiB (%s)", u/1048576, t/1048576, "'"$DISK_PERC"'")
}')

#========================#
#     Packages (brew)
#========================#
if command -v brew >/dev/null 2>&1; then
  BREW_PACKAGES=$(brew list 2>/dev/null | wc -l | tr -d ' ')
  CASK_PACKAGES=$(brew list --cask 2>/dev/null | wc -l | tr -d ' ')
else
  BREW_PACKAGES=0
  CASK_PACKAGES=0
fi

#========================#
#     Network Info
#========================#
IFACE=$(route -n get default 2>/dev/null | awk '/interface:/{print $2}')
if [ -n "${IFACE:-}" ]; then
  IP=$(ipconfig getifaddr "$IFACE" 2>/dev/null || echo "Unavailable")
else
  IP=$(ipconfig getifaddr en0 2>/dev/null || ipconfig getifaddr en1 2>/dev/null || echo "Unavailable")
fi

#========================#
#       Output
#========================#
if [ "$PLAIN" -eq 1 ]; then
  printf 'user=%s\nos=%s\nkernel=%s\nuptime=%s\nbrew=%s\ncask=%s\ncpu=%s\nram=%s\ndisk=%s\nip=%s\n' \
    "$USER_INFO" "$OS" "$KERNEL" "$UPTIME" "$BREW_PACKAGES" "$CASK_PACKAGES" "$CPU" "$MEMORY" "$DISK_VALUE" "$IP"
  exit 0
fi

printf "\n"
printf "                     %s..'%s          %s%s┌──────────── System ────────────┐%s\n" \
  "$ACCENT4" "$NC" "$BOLD" "$ACCENT4" "$NC"

printf "                 %s,xNMM.%s           %s│%s %sUser:%s %s\n" \
  "$ACCENT4" "$NC" "$ACCENT4" "$NC" "$BOLD$ACCENT1" "$NC" "$USER_INFO"

printf "               %s.OMMMMo%s            %s│%s %sOS:%s %s\n" \
  "$ACCENT4" "$NC" "$ACCENT4" "$NC" "$BOLD$ACCENT1" "$NC" "$OS"

printf "               %slMM\"%s               %s│%s %sKernel:%s %s\n" \
  "$ACCENT4" "$NC" "$ACCENT4" "$NC" "$BOLD$ACCENT1" "$NC" "$KERNEL"

printf "     %s.;loddo:.  .olloddol;.%s       %s│%s %sUptime:%s %s\n" \
  "$ACCENT4" "$NC" "$ACCENT4" "$NC" "$BOLD$ACCENT1" "$NC" "$UPTIME"

printf "   %scKMMMMMMMMMMNWMMMMMMMMMM0:%s     %s│%s %sPackages:%s %s (brew), %s (cask)\n" \
  "$ACCENT4" "$NC" "$ACCENT4" "$NC" "$BOLD$ACCENT1" "$NC" "$BREW_PACKAGES" "$CASK_PACKAGES"

printf " .%sKMMMMMMMMMMMMMMMMMMMMMMMWd.%s     %s%s└────────────────────────────────┘%s\n" \
  "$ACCENT4" "$NC" "$BOLD" "$ACCENT4" "$NC"

printf " %sXMMMMMMMMMMMMMMMMMMMMMMMX.%s       %s%s┌─────────── Hardware ───────────┐%s\n" \
  "$ACCENT4" "$NC" "$BOLD" "$ACCENT4" "$NC"

printf "%s;MMMMMMMMMMMMMMMMMMMMMMMM:%s        %s│%s %sCPU:%s %s\n" \
  "$ACCENT4" "$NC" "$ACCENT4" "$NC" "$BOLD$ACCENT2" "$NC" "$CPU"

printf "%s:MMMMMMMMMMMMMMMMMMMMMMMM:%s        %s│%s %sRAM:%s %s\n" \
  "$ACCENT4" "$NC" "$ACCENT4" "$NC" "$BOLD$ACCENT2" "$NC" "$MEMORY"

printf "%s.MMMMMMMMMMMMMMMMMMMMMMMX.%s        %s│%s %sDisk:%s %s\n" \
  "$ACCENT4" "$NC" "$ACCENT4" "$NC" "$BOLD$ACCENT2" "$NC" "$DISK_VALUE"

printf " %skMMMMMMMMMMMMMMMMMMMMMMMMWd.%s     %s%s└────────────────────────────────┘%s\n" \
  "$ACCENT4" "$NC" "$BOLD" "$ACCENT4" "$NC"

printf " %s'XMMMMMMMMMMMMMMMMMMMMMMMMMMk%s    %s%s┌─────────── Network ────────────┐%s\n" \
  "$ACCENT4" "$NC" "$BOLD" "$ACCENT4" "$NC"

printf "  %s'XMMMMMMMMMMMMMMMMMMMMMMMMK.%s    %s│%s %sIP:%s %s\n" \
  "$ACCENT4" "$NC" "$ACCENT4" "$NC" "$BOLD$ACCENT3" "$NC" "$IP"

printf "    %skMMMMMMMMMMMMMMMMMMMMMMd%s      %s%s└────────────────────────────────┘%s\n" \
  "$ACCENT4" "$NC" "$BOLD" "$ACCENT4" "$NC"

printf "     %s;KMMMMMMMWXXWMMMMMMMk.%s       \n" "$ACCENT4" "$NC"
printf "       %s\"cooc*\"    \"*coo'\"%s         \n\n" "$ACCENT4" "$NC"